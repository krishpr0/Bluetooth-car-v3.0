#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;
float error, correction;
float Kp = 5.0; // Proportional gain for correction

#define in1 2
#define in2 3
#define in3 4
#define in4 5

int command;
int Speed = 204;
int Speedsec = 100;
int ledPin1 = 6;
int ledPin2 = 7;
int ledPin3 = 8;
int ledPin4 = 9;
int buzzer_Pin = 10;

void setup() {
  Wire.begin();
  Serial.begin(9600);
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed");
    while (1);
  }
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);
  pinMode(ledPin4, OUTPUT);
  pinMode(buzzer_Pin, OUTPUT);
}

void loop() {
  if (Serial.available() > 0) {
    command = Serial.read();
    Serial.print("Received command: ");
    Serial.println((char)command);
    Stop();
    switch (command) {
      case 'F': forward(); break;
      case 'B': back(); break;
      case 'L': left(); break;
      case 'R': right(); break;
      case 'G': forwardleft(); break;
      case 'I': forwardright(); break;
      case 'H': backleft(); break;
      case 'J': backright(); break;
      case 'V': digitalWrite(buzzer_Pin, HIGH); break;
      case 'v': digitalWrite(buzzer_Pin, LOW); break;
      case 'X': flashLights(); break;
      case 'x': turnOffLights(); break;
    }
  }
}

void forward() {
  adjustMotor();
  analogWrite(in1, Speed + correction);
  analogWrite(in3, Speed - correction);
}

void back() {
  adjustMotor();
  analogWrite(in2, Speed + correction);
  analogWrite(in4, Speed - correction);
}

void left() {
  analogWrite(in2, Speed);
  analogWrite(in3, Speed);
}

void right() {
  analogWrite(in1, Speed);
  analogWrite(in4, Speed);
}

void forwardleft() {
  adjustMotor();
  analogWrite(in1, Speedsec);
  analogWrite(in3, Speed);
}

void forwardright() {
  adjustMotor();
  analogWrite(in1, Speed);
  analogWrite(in3, Speedsec);
}

void backleft() {
  adjustMotor();
  analogWrite(in2, Speedsec);
  analogWrite(in4, Speed);
}

void backright() {
  adjustMotor();
  analogWrite(in2, Speed);
  analogWrite(in4, Speedsec);
}

void Stop() {
  analogWrite(in1, 0);
  analogWrite(in2, 0);
  analogWrite(in3, 0);
  analogWrite(in4, 0);
}

void adjustMotor() {
  int16_t gx, gy, gz;
  mpu.getRotation(&gx, &gy, &gz);
  error = gx / 131.0;
  correction = Kp * error;
}

void flashLights() {
  digitalWrite(ledPin1, HIGH);
  digitalWrite(ledPin2, HIGH);
  digitalWrite(ledPin3, HIGH);
  digitalWrite(ledPin4, HIGH);
  delay(1000);
  digitalWrite(ledPin1, LOW);
  digitalWrite(ledPin2, LOW);
  digitalWrite(ledPin3, LOW);
  digitalWrite(ledPin4, LOW);
  delay(1000);
}

void turnOffLights() {
  digitalWrite(ledPin1, LOW);
  digitalWrite(ledPin2, LOW);
  digitalWrite(ledPin3, LOW);
  digitalWrite(ledPin4, LOW);
}
